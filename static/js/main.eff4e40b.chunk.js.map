{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/ContactList/ContactList.module.css","components/Container/Container.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","App.js","index.js"],"names":["module","exports","Container","children","className","s","container","Section","section","INITIAL_STATE","name","number","ContactForm","state","handleInputChange","e","currentTarget","value","setState","handleBtnSubmit","preventDefault","console","log","props","onSubmit","reset","this","form","autoComplete","label","type","pattern","title","required","onChange","input","btn","Component","Contact","contacts","map","contact","id","ContactList","contactList","App","filter","addContact","uuidv4","some","toLowerCase","alert","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eff4e40b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3Ncxl\",\"label\":\"ContactForm_label__3cD8k\",\"input\":\"ContactForm_input__3JBgz\",\"btn\":\"ContactForm_btn__2LhQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1DHY8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1JWFE\",\"title\":\"Section_title__2x9_-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2mw2n\",\"contact\":\"ContactList_contact__33v_m\"};","import PropTypes from 'prop-types';\r\nimport s from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n    return (\r\n        <div className={s.container}>\r\n            {children}\r\n        </div>);\r\n};\r\n\r\nContainer.propTypes = {\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default Container;","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ children }) {\r\n  return (\r\n    <section className={s.section}>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Section;","import { Component } from 'react';\r\nimport s from './ContactForm.module.css';\r\n\r\n// Форма добавления контактов\r\n\r\n// Выносим объект с примитивами в константу, чтобы было удобно сбрасывать.\r\n// Нельзя использовать, если в каком-то свойстве состояния хранится сложный тип.\r\nconst INITIAL_STATE = {\r\n  name: '',\r\n  number: ''\r\n};\r\n\r\nclass ContactForm extends Component {\r\n  // в форме стейт нужен только при сабмите, поэтому храним\r\n  // его в компоненте формы, а при сабмите - отдаем наружу\r\n  state = {\r\n    ...INITIAL_STATE\r\n  };\r\n  // Для всех инпутов создаем один обработчик\r\n  // \"паттерн ввод данных\" ->\r\n  handleInputChange = e => {\r\n    // подходит для инпутов, у которых есть name and value, \r\n    // для радиокнопок, но не чекбоксов\r\n    const { name, value } = e.currentTarget;\r\n    // Различать инпуты будем по атрибуту \"name\",\r\n    // применяя вычисляемые свойства объекта\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleBtnSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n\r\n    console.log(`\r\n      Name: ${name}\r\n      Number: ${number}\r\n    `);\r\n    // проп, который передается форме для вызова при сабмите\r\n    this.props.onSubmit({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form\r\n            onSubmit={this.handleBtnSubmit} \r\n            className={s.form} \r\n            autoComplete=\"off\">\r\n        \r\n        <label className={s.label}>\r\n          Name\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n                onChange={this.handleInputChange}\r\n                className={s.input}\r\n          />\r\n        </label>\r\n\r\n        <label className={s.label}>\r\n          Number\r\n          <input\r\n            name=\"number\"\r\n            type=\"tel\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n                onChange={this.handleInputChange}\r\n                className={s.input}\r\n          />\r\n        </label>        \r\n\r\n        <button type=\"submit\" className={s.btn}>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// Проблема обновления состояния - всегда должно быть новое после рендера,  \r\n// а не мутировать по ссылке старое.\r\n// Проверка на имутабеольность (равны ли эти значения между рендерами) ->\r\n// componentDidUpdate(prevProps, prevState) {\r\n//   console.log(prevState.name === this.state.name);\r\n// }","import PropTypes from 'prop-types';\r\nimport s from './Contact.module.css';\r\n\r\n// Элемент списка контактов\r\n\r\nfunction Contact({ contacts }) {\r\n  return (contacts.map((contact) => {\r\n      return (<li key={contact.id} className={s.contact}>{contact.name}</li>)\r\n  }))\r\n};\r\n\r\nContact.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired\r\n};\r\n\r\nexport default Contact;","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\nimport Contact from '../Contact';\r\n\r\n// Список контактов\r\n\r\nfunction ContactList({ contacts }) {\r\n  return (\r\n    <ul className={s.contactList}>\r\n      <Contact\r\n        contacts={contacts}>\r\n      </Contact>\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape().isRequired\r\n  ).isRequired\r\n};\r\n\r\nexport default ContactList;","import { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport './App.css';\nimport Container from './components/Container';\nimport Section from './components/Section';\nimport ContactForm from './components/ContactForm';\n// import Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n    ],\n    filter: '',\n  }\n\n  addContact = ({ name, number }) => {\n    const { contacts } = this.state;\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n\n    contacts.some(contact =>\n      contact.name.toLowerCase() === name.toLowerCase())\n      ?\n        alert(`${name} is already in contacts.`)\n      : //   alert(`${contact.name} is already in contacts.`);\n        this.setState(prevState => ({\n          contacts: [contact, ...prevState.contacts],\n          // contacts: [...prevState.contacts, contact],\n        }));\n  }\n\n  render() {\n    const { contacts } = this.state;\n    const { addContact } = this;\n    return (\n      <Container>\n        <Section>\n          <h1>Phonebook</h1>\n          <ContactForm onSubmit={addContact}/>\n        </Section>\n        \n        <Section>\n          <h2>Contacts</h2>\n          {/* <Filter \n            contacts={contacts} /> */}\n          <ContactList \n            contacts={contacts} />\n        </Section>\n      </Container>\n    )\n  }\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}